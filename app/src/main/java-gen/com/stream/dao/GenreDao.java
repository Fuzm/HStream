package com.stream.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.stream.dao.GenreInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "hs_genre_info".
*/
public class GenreDao extends AbstractDao<GenreInfo, String> {

    public static final String TABLENAME = "hs_genre_info";

    /**
     * Properties of entity GenreInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Genre_id = new Property(0, String.class, "genre_id", true, "GENRE_ID");
        public final static Property Genre_name = new Property(1, String.class, "genre_name", false, "GENRE_NAME");
        public final static Property Status = new Property(2, Integer.class, "status", false, "STATUS");
    };


    public GenreDao(DaoConfig config) {
        super(config);
    }
    
    public GenreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"hs_genre_info\" (" + //
                "\"GENRE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: genre_id
                "\"GENRE_NAME\" TEXT NOT NULL ," + // 1: genre_name
                "\"STATUS\" INTEGER);"); // 2: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"hs_genre_info\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GenreInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getGenre_id());
        stmt.bindString(2, entity.getGenre_name());
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(3, status);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GenreInfo readEntity(Cursor cursor, int offset) {
        GenreInfo entity = new GenreInfo( //
            cursor.getString(offset + 0), // genre_id
            cursor.getString(offset + 1), // genre_name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GenreInfo entity, int offset) {
        entity.setGenre_id(cursor.getString(offset + 0));
        entity.setGenre_name(cursor.getString(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GenreInfo entity, long rowId) {
        return entity.getGenre_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GenreInfo entity) {
        if(entity != null) {
            return entity.getGenre_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
