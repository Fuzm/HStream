package com.stream.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.stream.dao.SourceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "hs_source_info".
*/
public class SourceDao extends AbstractDao<SourceInfo, Long> {

    public static final String TABLENAME = "hs_source_info";

    /**
     * Properties of entity SourceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Token = new Property(1, String.class, "token", false, "TOKEN");
        public final static Property Video_title = new Property(2, String.class, "video_title", false, "VIDEO_TITLE");
        public final static Property Source_url = new Property(3, String.class, "source_url", false, "SOURCE_URL");
        public final static Property Source_name = new Property(4, String.class, "source_name", false, "SOURCE_NAME");
        public final static Property Video_url = new Property(5, String.class, "video_url", false, "VIDEO_URL");
        public final static Property Upd_time = new Property(6, long.class, "upd_time", false, "UPD_TIME");
    };


    public SourceDao(DaoConfig config) {
        super(config);
    }
    
    public SourceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"hs_source_info\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TOKEN\" TEXT NOT NULL ," + // 1: token
                "\"VIDEO_TITLE\" TEXT," + // 2: video_title
                "\"SOURCE_URL\" TEXT NOT NULL ," + // 3: source_url
                "\"SOURCE_NAME\" TEXT NOT NULL ," + // 4: source_name
                "\"VIDEO_URL\" TEXT NOT NULL ," + // 5: video_url
                "\"UPD_TIME\" INTEGER NOT NULL );"); // 6: upd_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"hs_source_info\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SourceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getToken());
 
        String video_title = entity.getVideo_title();
        if (video_title != null) {
            stmt.bindString(3, video_title);
        }
        stmt.bindString(4, entity.getSource_url());
        stmt.bindString(5, entity.getSource_name());
        stmt.bindString(6, entity.getVideo_url());
        stmt.bindLong(7, entity.getUpd_time());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SourceInfo readEntity(Cursor cursor, int offset) {
        SourceInfo entity = new SourceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // video_title
            cursor.getString(offset + 3), // source_url
            cursor.getString(offset + 4), // source_name
            cursor.getString(offset + 5), // video_url
            cursor.getLong(offset + 6) // upd_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SourceInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setToken(cursor.getString(offset + 1));
        entity.setVideo_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSource_url(cursor.getString(offset + 3));
        entity.setSource_name(cursor.getString(offset + 4));
        entity.setVideo_url(cursor.getString(offset + 5));
        entity.setUpd_time(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SourceInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SourceInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
