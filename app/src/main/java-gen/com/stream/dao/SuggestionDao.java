package com.stream.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.stream.dao.Suggestion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "hs_suggestions".
*/
public class SuggestionDao extends AbstractDao<Suggestion, Integer> {

    public static final String TABLENAME = "hs_suggestions";

    /**
     * Properties of entity Suggestion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Query = new Property(1, String.class, "query", false, "QUERY");
        public final static Property Date = new Property(2, Long.class, "date", false, "DATE");
    };


    public SuggestionDao(DaoConfig config) {
        super(config);
    }
    
    public SuggestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"hs_suggestions\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"QUERY\" TEXT," + // 1: query
                "\"DATE\" INTEGER);"); // 2: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"hs_suggestions\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Suggestion entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String query = entity.getQuery();
        if (query != null) {
            stmt.bindString(2, query);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Suggestion readEntity(Cursor cursor, int offset) {
        Suggestion entity = new Suggestion( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // query
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Suggestion entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setQuery(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(Suggestion entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(Suggestion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
