package com.stream.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.stream.dao.DetailInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "hs_detail_info".
*/
public class DetailDao extends AbstractDao<DetailInfo, String> {

    public static final String TABLENAME = "hs_detail_info";

    /**
     * Properties of entity DetailInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Token = new Property(0, String.class, "token", true, "TOKEN");
        public final static Property Video_title = new Property(1, String.class, "video_title", false, "VIDEO_TITLE");
        public final static Property Alternative_name = new Property(2, String.class, "alternative_name", false, "ALTERNATIVE_NAME");
        public final static Property Offering_date = new Property(3, String.class, "offering_date", false, "OFFERING_DATE");
        public final static Property Subtitle_path = new Property(4, String.class, "subtitle_path", false, "SUBTITLE_PATH");
        public final static Property Detail_url = new Property(5, String.class, "detail_url", false, "DETAIL_URL");
    };


    public DetailDao(DaoConfig config) {
        super(config);
    }
    
    public DetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"hs_detail_info\" (" + //
                "\"TOKEN\" TEXT PRIMARY KEY NOT NULL ," + // 0: token
                "\"VIDEO_TITLE\" TEXT NOT NULL ," + // 1: video_title
                "\"ALTERNATIVE_NAME\" TEXT," + // 2: alternative_name
                "\"OFFERING_DATE\" TEXT," + // 3: offering_date
                "\"SUBTITLE_PATH\" TEXT," + // 4: subtitle_path
                "\"DETAIL_URL\" TEXT);"); // 5: detail_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"hs_detail_info\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DetailInfo entity) {
        stmt.clearBindings();
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(1, token);
        }
        stmt.bindString(2, entity.getVideo_title());
 
        String alternative_name = entity.getAlternative_name();
        if (alternative_name != null) {
            stmt.bindString(3, alternative_name);
        }
 
        String offering_date = entity.getOffering_date();
        if (offering_date != null) {
            stmt.bindString(4, offering_date);
        }
 
        String subtitle_path = entity.getSubtitle_path();
        if (subtitle_path != null) {
            stmt.bindString(5, subtitle_path);
        }
 
        String detail_url = entity.getDetail_url();
        if (detail_url != null) {
            stmt.bindString(6, detail_url);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DetailInfo readEntity(Cursor cursor, int offset) {
        DetailInfo entity = new DetailInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // token
            cursor.getString(offset + 1), // video_title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // alternative_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // offering_date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // subtitle_path
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // detail_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DetailInfo entity, int offset) {
        entity.setToken(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVideo_title(cursor.getString(offset + 1));
        entity.setAlternative_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOffering_date(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSubtitle_path(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDetail_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DetailInfo entity, long rowId) {
        return entity.getToken();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DetailInfo entity) {
        if(entity != null) {
            return entity.getToken();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
